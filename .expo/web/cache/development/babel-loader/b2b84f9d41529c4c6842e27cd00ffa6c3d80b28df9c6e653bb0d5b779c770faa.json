{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var ChallengeContext = React.createContext();\nexport var ChallengeProvider = function ChallengeProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(function () {\n      var savedChallenges = localStorage.getItem('challenges');\n      if (savedChallenges) {\n        return JSON.parse(savedChallenges);\n      }\n      return [{\n        id: '1',\n        title: 'Drink Water',\n        description: 'Drink 8 glasses of water every day to stay hydrated.'\n      }, {\n        id: '2',\n        title: 'Turn off Lights',\n        description: 'Make sure to turn off lights when you leave a room to save energy.'\n      }, {\n        id: '3',\n        title: 'Stand',\n        description: 'Stand up every hour to stay active.'\n      }, {\n        id: '4',\n        title: 'Exercise',\n        description: 'Exercise for 30 minutes every day to stay healthy.'\n      }, {\n        id: '5',\n        title: 'Stretch',\n        description: 'Stretch for 10 minutes every day to stay flexible.'\n      }, {\n        id: '6',\n        title: 'Sleep',\n        description: 'Get 8 hours of sleep every night to stay healthy.'\n      }];\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    challenges = _useState2[0],\n    setChallenges = _useState2[1];\n  useEffect(function () {\n    var interval = setInterval(function () {\n      var now = new Date();\n      var savedDate = new Date(localStorage.getItem('date'));\n      if (now.getDate() !== savedDate.getDate()) {\n        setChallenges([{\n          id: '1',\n          title: 'Drink Water',\n          description: 'Drink 8 glasses of water every day to stay hydrated.'\n        }, {\n          id: '2',\n          title: 'Turn off Lights',\n          description: 'Make sure to turn off lights when you leave a room to save energy.'\n        }, {\n          id: '3',\n          title: 'Stand',\n          description: 'Stand up every hour to stay active.'\n        }, {\n          id: '4',\n          title: 'Exercise',\n          description: 'Exercise for 30 minutes every day to stay healthy.'\n        }, {\n          id: '5',\n          title: 'Stretch',\n          description: 'Stretch for 10 minutes every day to stay flexible.'\n        }, {\n          id: '6',\n          title: 'Sleep',\n          description: 'Get 8 hours of sleep every night to stay healthy.'\n        }]);\n        localStorage.setItem('date', now.toString());\n      }\n    }, 60000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  return _jsx(ChallengeContext.Provider, {\n    value: {\n      challenges: challenges,\n      setChallenges: setChallenges\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","ChallengeContext","createContext","ChallengeProvider","_ref","children","_useState","savedChallenges","localStorage","getItem","JSON","parse","id","title","description","_useState2","_slicedToArray","challenges","setChallenges","interval","setInterval","now","Date","savedDate","getDate","setItem","toString","clearInterval","Provider","value"],"sources":["C:/Users/antho/Desktop/EcoTrack/EcoTracker/src/Components/pages/ChallengeContext.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport const ChallengeContext = React.createContext();\r\n\r\nexport const ChallengeProvider = ({ children }) => {\r\n    const [challenges, setChallenges] = useState(() => {\r\n        // Load the state from localStorage\r\n        const savedChallenges = localStorage.getItem('challenges');\r\n        if (savedChallenges) {\r\n            return JSON.parse(savedChallenges);\r\n        }\r\n        // Initialize the state with default values\r\n        return [\r\n            {\r\n                id: '1',\r\n                title: 'Drink Water',\r\n                description: 'Drink 8 glasses of water every day to stay hydrated.',\r\n            },\r\n            {\r\n                id: '2',\r\n                title: 'Turn off Lights',\r\n                description: 'Make sure to turn off lights when you leave a room to save energy.',\r\n            },\r\n            {\r\n                id: '3',\r\n                title: 'Stand',\r\n                description: 'Stand up every hour to stay active.',\r\n            },\r\n            {\r\n                id: '4',\r\n                title: 'Exercise',\r\n                description: 'Exercise for 30 minutes every day to stay healthy.',\r\n            },\r\n            {\r\n                id: '5',\r\n                title: 'Stretch',\r\n                description: 'Stretch for 10 minutes every day to stay flexible.',\r\n            },\r\n            {\r\n                id: '6',\r\n                title: 'Sleep',\r\n                description: 'Get 8 hours of sleep every night to stay healthy.',\r\n            },\r\n        ];\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Check the current date every minute and reset the state when a new day starts\r\n        const interval = setInterval(() => {\r\n            const now = new Date();\r\n            const savedDate = new Date(localStorage.getItem('date'));\r\n            if (now.getDate() !== savedDate.getDate()) {\r\n                // Reset the state\r\n                setChallenges([\r\n                    {\r\n                        id: '1',\r\n                        title: 'Drink Water',\r\n                        description: 'Drink 8 glasses of water every day to stay hydrated.',\r\n                    },\r\n                    {\r\n                        id: '2',\r\n                        title: 'Turn off Lights',\r\n                        description: 'Make sure to turn off lights when you leave a room to save energy.',\r\n                    },\r\n                    {\r\n                        id: '3',\r\n                        title: 'Stand',\r\n                        description: 'Stand up every hour to stay active.',\r\n                    },\r\n                    {\r\n                        id: '4',\r\n                        title: 'Exercise',\r\n                        description: 'Exercise for 30 minutes every day to stay healthy.',\r\n                    },\r\n                    {\r\n                        id: '5',\r\n                        title: 'Stretch',\r\n                        description: 'Stretch for 10 minutes every day to stay flexible.',\r\n                    },\r\n                    {\r\n                        id: '6',\r\n                        title: 'Sleep',\r\n                        description: 'Get 8 hours of sleep every night to stay healthy.',\r\n                    },\r\n                ]);\r\n                // Save the current date to localStorage\r\n                localStorage.setItem('date', now.toString());\r\n            }\r\n        }, 60000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <ChallengeContext.Provider value={{ challenges, setChallenges }}>\r\n            {children}\r\n        </ChallengeContext.Provider>\r\n    );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}