{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport Navbar from \"../Navbar\";\nimport Footer from \"../Footer\";\nimport Snowfall from 'react-snowfall';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { isToday } from 'date-fns';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Challenges = function Challenges(_ref) {\n  var navigation = _ref.navigation;\n  var challenges = [{\n    id: '1',\n    title: 'Drink Water',\n    description: 'Drink at least 8 glasses of water every day to stay hydrated.'\n  }, {\n    id: '2',\n    title: 'Turn off Lights',\n    description: 'Make sure to turn off lights when you leave a room to save energy.'\n  }, {\n    id: '3',\n    title: 'Stand',\n    description: 'Stand up every hour to stay active.'\n  }, {\n    id: '4',\n    title: 'Exercise',\n    description: 'Exercise for 30 minutes every day to stay healthy.'\n  }, {\n    id: '5',\n    title: 'Stretch',\n    description: 'Stretch for 10 minutes every day to stay flexible.'\n  }, {\n    id: '6',\n    title: 'Sleep',\n    description: 'Get 8 hours of sleep every night to stay healthy.'\n  }];\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    completedChallenges = _useState2[0],\n    setCompletedChallenges = _useState2[1];\n  var setCompletedChallengesWithStorage = function () {\n    var _ref2 = _asyncToGenerator(function* (value) {\n      try {\n        yield AsyncStorage.setItem('@completedChallenges', JSON.stringify(value));\n        var today = new Date();\n        var dateOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate()).toString();\n        yield AsyncStorage.setItem('@date', dateOnly);\n        setCompletedChallenges(value);\n      } catch (e) {}\n    });\n    return function setCompletedChallengesWithStorage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var loadCompletedChallenges = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var storedDate = new Date(yield AsyncStorage.getItem('@date'));\n        var today = new Date();\n        var currentDateOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        if (storedDate.toString() !== currentDateOnly.toString()) {\n          setCompletedChallenges({});\n        } else {\n          var value = yield AsyncStorage.getItem('@completedChallenges');\n          if (value !== null) {\n            setCompletedChallenges(JSON.parse(value));\n          }\n        }\n      } catch (e) {}\n    });\n    return function loadCompletedChallenges() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    loadCompletedChallenges();\n  }, []);\n  var renderItem = function renderItem(_ref4) {\n    var item = _ref4.item;\n    var isCompleted = !!completedChallenges[item.id];\n    return _jsxs(View, {\n      style: styles.item,\n      children: [_jsxs(View, {\n        children: [_jsx(Text, {\n          style: styles.title,\n          children: item.title\n        }), _jsx(Text, {\n          style: {\n            fontSize: 16\n          },\n          children: item.description\n        })]\n      }), _jsx(TouchableOpacity, {\n        style: {\n          marginLeft: 30\n        },\n        onPress: _asyncToGenerator(function* () {\n          var newCompletedChallenges = _objectSpread(_objectSpread({}, completedChallenges), {}, _defineProperty({}, item.id, !isCompleted));\n          yield setCompletedChallengesWithStorage(newCompletedChallenges);\n        }),\n        children: _jsx(MaterialIcons, {\n          name: \"check-circle\",\n          size: 32,\n          color: isCompleted ? 'green' : 'grey'\n        })\n      })]\n    });\n  };\n  var styles = {\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    title: {\n      fontSize: 32\n    },\n    title2: {\n      fontSize: 50,\n      fontWeight: 'bold',\n      color: 'white',\n      textAlign: 'center'\n    }\n  };\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsx(Navbar, {}), _jsxs(ImageBackground, {\n      source: require(\"../../../assets/ecoBackground.png\"),\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.title2,\n        children: \"Challenges\"\n      }), _jsx(FlatList, {\n        data: challenges,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        },\n        style: {\n          zIndex: 1\n        },\n        numColumns: 2\n      }), _jsx(Image, {\n        source: require(\"../../../assets/ecoMountain.png\"),\n        style: {\n          position: 'absolute',\n          bottom: 0,\n          width: '100%',\n          height: 500\n        }\n      }), _jsx(Snowfall, {\n        snowflakeCount: 250\n      }), _jsx(Image, {\n        source: require(\"../../../assets/ecoTreesSnow.png\"),\n        style: {\n          position: 'absolute',\n          bottom: -40,\n          width: '100%',\n          height: 160\n        }\n      })]\n    }), _jsx(Footer, {\n      style: {\n        height: 18\n      },\n      navigation: navigation\n    })]\n  });\n};\nexport default Challenges;","map":{"version":3,"names":["React","useState","useEffect","View","Text","Image","ImageBackground","FlatList","TouchableOpacity","MaterialIcons","Navbar","Footer","Snowfall","AsyncStorage","isToday","jsx","_jsx","jsxs","_jsxs","Challenges","_ref","navigation","challenges","id","title","description","_useState","_useState2","_slicedToArray","completedChallenges","setCompletedChallenges","setCompletedChallengesWithStorage","_ref2","_asyncToGenerator","value","setItem","JSON","stringify","today","Date","dateOnly","getFullYear","getMonth","getDate","toString","e","_x","apply","arguments","loadCompletedChallenges","_ref3","storedDate","getItem","currentDateOnly","parse","renderItem","_ref4","item","isCompleted","style","styles","children","fontSize","marginLeft","onPress","newCompletedChallenges","_objectSpread","_defineProperty","name","size","color","container","flex","justifyContent","alignItems","title2","fontWeight","textAlign","source","require","data","keyExtractor","zIndex","numColumns","position","bottom","width","height","snowflakeCount"],"sources":["C:/Users/antho/Desktop/EcoTrack/EcoTracker/src/Components/pages/Challenges.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, Image, ImageBackground, FlatList, TouchableOpacity } from 'react-native';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport Navbar from '../Navbar';\r\nimport Footer from '../Footer';\r\nimport Snowfall from 'react-snowfall';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { isToday } from 'date-fns';\r\n\r\n\r\nconst Challenges = ({ navigation }) => {\r\n    const challenges = [\r\n        {\r\n            id: '1',\r\n            title: 'Drink Water',\r\n            description: 'Drink at least 8 glasses of water every day to stay hydrated.',\r\n        },\r\n        {\r\n            id: '2',\r\n            title: 'Turn off Lights',\r\n            description: 'Make sure to turn off lights when you leave a room to save energy.',\r\n        },\r\n        {\r\n            id: '3',\r\n            title: 'Stand',\r\n            description: 'Stand up every hour to stay active.',\r\n        },\r\n        {\r\n            id: '4',\r\n            title: 'Exercise',\r\n            description: 'Exercise for 30 minutes every day to stay healthy.',\r\n        },\r\n        {\r\n            id: '5',\r\n            title: 'Stretch',\r\n            description: 'Stretch for 10 minutes every day to stay flexible.',\r\n        },\r\n        {\r\n            id: '6',\r\n            title: 'Sleep',\r\n            description: 'Get 8 hours of sleep every night to stay healthy.',\r\n        },\r\n    ];\r\n    const [completedChallenges, setCompletedChallenges] = useState({});\r\n\r\n    const setCompletedChallengesWithStorage = async (value) => {\r\n        try {\r\n            await AsyncStorage.setItem('@completedChallenges', JSON.stringify(value));\r\n            const today = new Date();\r\n            const dateOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate()).toString();\r\n            await AsyncStorage.setItem('@date', dateOnly);\r\n            setCompletedChallenges(value);\r\n        } catch (e) {\r\n            // saving error\r\n        }\r\n    };\r\n\r\n    const loadCompletedChallenges = async () => {\r\n        try {\r\n            const storedDate = new Date(await AsyncStorage.getItem('@date'));\r\n            const today = new Date();\r\n            const currentDateOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate());\r\n\r\n            if (storedDate.toString() !== currentDateOnly.toString()) {\r\n                // If the stored date is different from the current date, reset the completed challenges\r\n                setCompletedChallenges({});\r\n            } else {\r\n                const value = await AsyncStorage.getItem('@completedChallenges');\r\n                if (value !== null) {\r\n                    setCompletedChallenges(JSON.parse(value));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // loading error\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadCompletedChallenges();\r\n    }, []);\r\n\r\n    const renderItem = ({ item }) => {\r\n        // Determine if the current challenge is completed\r\n        const isCompleted = !!completedChallenges[item.id];\r\n\r\n        return (\r\n            <View style={styles.item}>\r\n                <View>\r\n                    <Text style={styles.title}>{item.title}</Text>\r\n                    <Text style={{ fontSize: 16 }}>{item.description}</Text>\r\n                </View>\r\n                <TouchableOpacity\r\n                    style={{ marginLeft: 30 }}\r\n                    onPress={async () => {\r\n                        const newCompletedChallenges = {\r\n                            ...completedChallenges,\r\n                            [item.id]: !isCompleted // Toggle the completion status of the challenge\r\n                        };\r\n                        await setCompletedChallengesWithStorage(newCompletedChallenges);\r\n                    }}>\r\n                    <MaterialIcons name=\"check-circle\" size={32} color={isCompleted ? 'green' : 'grey'} />\r\n                </TouchableOpacity>\r\n            </View>\r\n        );\r\n    };\r\n\r\n    const styles = {\r\n        container: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        },\r\n        // item: {\r\n        //     padding: 20,\r\n        //     marginVertical: 8,\r\n        //     marginHorizontal: 16,\r\n        //     marginTop: 20,\r\n        //     backgroundColor: 'white',\r\n        //     flexDirection: 'row',\r\n        //     justifyContent: 'space-between',\r\n        //     alignItems: 'center',\r\n        //     borderRadius: 10,\r\n        //     borderWidth: 2,\r\n        //     borderColor: '#062a52',\r\n        //     width: 600,\r\n        //     height: 80,\r\n        // },\r\n        title: {\r\n            fontSize: 32,\r\n        },\r\n        title2: {\r\n            fontSize: 50,\r\n            fontWeight: 'bold',\r\n            color: 'white',\r\n            textAlign: 'center',\r\n        },\r\n    };\r\n    return (\r\n        <View style={{ flex: 1 }}>\r\n            <Navbar />\r\n            <ImageBackground source={require(\"../../../assets/ecoBackground.png\")} style={styles.container}>\r\n                <Text style={styles.title2}>Challenges</Text>\r\n                <FlatList\r\n                    data={challenges}\r\n                    renderItem={renderItem}\r\n                    keyExtractor={item => item.id}\r\n                    style={{ zIndex: 1 }}\r\n                    numColumns={2}\r\n                />\r\n                <Image source={require(\"../../../assets/ecoMountain.png\")} style={{ position: 'absolute', bottom: 0, width: '100%', height: 500 }} />\r\n                <Snowfall snowflakeCount={250} />\r\n                <Image source={require(\"../../../assets/ecoTreesSnow.png\")} style={{ position: 'absolute', bottom: -40, width: '100%', height: 160 }} />\r\n            </ImageBackground>\r\n            <Footer style={{ height: 18 }} navigation={navigation} />\r\n        </View>\r\n    );\r\n\r\n};\r\n\r\nexport default Challenges;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}